# This is an EXAMPLE Bridge. Before deploying it, replace all of the placeholder values with valid data. 

apiVersion: flow.triggermesh.io/v1alpha1
kind: Bridge
metadata:
  name: &bridgename zendesk-comprehend-zendesk
  annotations:
    bridges.triggermesh.io/name: *bridgename
spec:
  components:
  # Event brokers
  - object:
      apiVersion: eventing.knative.dev/v1beta1
      kind: Broker
      metadata:
        name: raw-events
  - object:
      apiVersion: eventing.knative.dev/v1beta1
      kind: Broker
      metadata:
        name: &transformbroker transformed-events
  # Event source
  - object:
      apiVersion: sources.triggermesh.io/v1alpha1
      kind: ZendeskSource
      metadata:
        annotations:
          autoscaling.knative.dev/minScale: "1"
        name: zendesk
      spec:
        email: &email dev@triggermesh.com
        subdomain: &subdomain triggermesh
        token:
          secretKeyRef:
            name: zendesk-api
            key: token
        webhookUsername: deez
        webhookPassword:
          secretKeyRef:
            name: zendesk-api
            key: password
        sink:
          ref:
            apiVersion: eventing.knative.dev/v1beta1
            kind: Broker
            name: raw-events
    # Analysis service   
  - object:
        apiVersion: messaging.knative.dev/v1beta1
        kind: Subscription
        metadata:
          name: &transformname transforms
        spec:
          channel:
            apiVersion: messaging.knative.dev/v1beta1
            kind: InMemoryChannel
            name: raw-events-kne-trigger
          subscriber:
            ref:
              apiVersion: serving.knative.dev/v1
              kind: Service
              name: *transformname
          reply:
            ref:
              apiVersion: eventing.knative.dev/v1beta1
              kind: Broker
              name: *transformbroker
  - object:
      apiVersion: serving.knative.dev/v1
      kind: Service
      metadata:
        annotations:
          autoscaling.knative.dev/minScale: "1"
        name: *transformname
        labels:
          serving.knative.dev/visibility: cluster-local
      spec:
        template:
          spec:
            containers:
            - image: gcr.io/neffdev/zenditional
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom: 
                    secretKeyRef:
                      name: aws
                      key: accessKeyId
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom: 
                    secretKeyRef:
                      name: aws
                      key: secretAccessKey
                - name: LANGUAGE
                  value: en 
                - name: AWS_REGION
                  value: <REGION>
  # Conditional Service 
  - object:
      apiVersion: serving.knative.dev/v1
      kind: Service
      metadata:
        annotations:
          autoscaling.knative.dev/minScale: "1"
        name: &conditionalname condition-log
        labels:
          serving.knative.dev/visibility: cluster-local
      spec:
        template:
          spec:
            containers:
            - image: gcr.io/neffdev/conditionalization
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom: 
                    secretKeyRef:
                      name: aws
                      key: accessKeyId
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom: 
                    secretKeyRef:
                      name: aws
                      key: secretAccessKey
                - name: AWS_REGION
                  value: <REGION>
                - name: BUCKET
                  value: <S3 BUCKET NAME>
                - name: K_SINK
                  value: http://broker-ingress.knative-eventing.svc.cluster.local/jeffthenaef/transformed-events      
  - object:
      apiVersion: eventing.knative.dev/v1beta1
      kind: Trigger
      metadata:
        name: *conditionalname
      spec:
        broker: *transformbroker
        filter:
          attributes:
            type: com.zendesk.tag.negative
        subscriber:
          ref:
            apiVersion: serving.knative.dev/v1
            kind: Service
            name: *conditionalname
  # Event target 
  - object:
      apiVersion: eventing.knative.dev/v1beta1
      kind: Trigger
      metadata:
        name: &targetname zendesk
      spec:
        broker: *transformbroker
        filter:
          attributes:
            type: com.zendesk.tag.create
        subscriber:
          ref:
            apiVersion: targets.triggermesh.io/v1alpha1
            kind: ZendeskTarget
            name: *targetname
  - object:
      apiVersion: targets.triggermesh.io/v1alpha1
      kind: ZendeskTarget
      metadata:
       annotations:
         autoscaling.knative.dev/minScale: "1"
       name: *targetname
      spec:
        subject: notneeded
        email: *email
        subdomain: *subdomain
        token:
         secretKeyRef:
           name: zendesk-api
           key: token
